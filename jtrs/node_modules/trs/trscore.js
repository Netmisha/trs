var os = require('os');
var sleep = require('sleep');
function Sleep(miliseconds) {
	sleep.usleep(miliseconds*1000);
}
function Messages(suite, test){
	this.suite=suite;
	this.test=test;
	this.sleepTime=500;
}
Messages.prototype.ShowTest = function() {
	return "Suite #"+this.suite+":"+"Test #"+this.test+" : ";
};
Messages.prototype.ResultOk = function(process) {
	process.send({ msg: this.ShowTest()+"Result OK" });
};
Messages.prototype.Fail = function(process, msg) {
	process.send({ msg: this.ShowTest()+"Fail: "+msg });
};
Messages.prototype.Error = function(process, msg) {
	process.send({ msg: this.ShowTest()+"Error: "+msg });
};
exports.Messages = Messages;

function Manager() {
	if (os.platform()=="win32") {
		this.file = process.argv[1].slice(-0, -7) +"suite.xml";
		var manageapp = require(process.argv[2]+"/lib/Win/ApplicationManagementWin");
		var xml2js = require('xml2js');
		this.manage = new manageapp.ApplicationManagement();
		var fileSystem = require("fs");
		var parser = new xml2js.Parser(); 
        var extendedData;
        parser.parseString(fileSystem.readFileSync(this.file).toString(),function (err, result) {
        	extendedData=result;
        });
        this.pause=Number(extendedData.suite.test[0].repeat[0].$.pause);
        this.repeat=Number(extendedData.suite.test[0].repeat[0]._);
        this.manage.SetAppName(String(extendedData.suite.application));
        this.manage.SetWindowName(String(extendedData.suite.windowName));
        this.msg = new Messages(extendedData.suite.$.name, extendedData.suite.test[0].$.name);
    }
	else {
		console.log("Operating system not supported");
		process.exit();
	}
}	
Manager.prototype.Test = function (fun){
	fun(this);
}
Manager.prototype.MouseClickAt = function (button, x, y){
	this.manage.SetMousePos(x,y);
	this.manage.MouseClick(button);
	Sleep(500);
}
Manager.prototype.Shortcut = function (command, key){
	Sleep(500);
	this.manage.KeyDown(Number(command));
	this.manage.KeyPress(Number(key));
	this.manage.KeyUp(Number(command));
	Sleep(500);
}
Manager.prototype.StartApp = function (){
	this.manage.StartApp();
	Sleep(500);
}
Manager.prototype.CloseApp = function (){
	this.manage.CloseApp();
	Sleep(500);
}
Manager.prototype.WindowMinimize = function (){
	this.manage.WindowMinimize();
	Sleep(500);
}
Manager.prototype.WindowMaximize = function (){
	this.manage.WindowMaximize();
	Sleep(500);
}
Manager.prototype.SetActive = function (){
	this.manage.SetActive();
	Sleep(500);
}
Manager.prototype.WindowRestore = function (){
	this.manage.WindowRestore();
	Sleep(500);
}
Manager.prototype.GetScreenWidth = function (){
	return this.manage.GetScreenWidth();
}
Manager.prototype.GetScreenHeight = function (){
	return this.manage.GetScreenHeight();
}
Manager.prototype.KeyDown = function (key){
	this.manage.KeyDown(Number(key));
	Sleep(500);
}
Manager.prototype.KeyUp = function (key){
	this.manage.KeyUp(Number(key));
	Sleep(500);
}
Manager.prototype.KeyPress = function (command, key){
	this.manage.KeyPress(Number(key));
	Sleep(500);
}
Manager.prototype.SetMousePos = function (x, y){
	this.manage.SetMousePos(x, y);
	Sleep(500);
}
Manager.prototype.MouseMove = function (x, y, pause){
	this.manage.SetMousePos(x, y);
	Sleep(500);
	this.manage.MouseMove(x, y, pause);
	Sleep(500);
}
Manager.prototype.MouseDown = function (button){
	this.manage.MouseDown(button);
	Sleep(500);
}
Manager.prototype.MouseUp = function (button){
	this.manage.MouseUp(button);
	Sleep(500);
}
Manager.prototype.MouseClick = function (button){
	this.manage.MouseClick(button);
	Sleep(500);
}
Manager.prototype.MouseWheelDown = function (){
	this.manage.MouseWheelDown();
	Sleep(500);
}
Manager.prototype.MouseWheelUp = function (){
	this.manage.MouseWheelUp();
	Sleep(500);
}
Manager.prototype.MouseWheelLeft = function (){
	this.manage.MouseWheelLeft();
	Sleep(500);
}
Manager.prototype.MouseWheelRight = function (){
	this.manage.MouseWheelRight();
	Sleep(500);
}
Manager.prototype.PrintScreen = function (path, name){
	this.manage.PrintScreen(path+name);
	Sleep(500);
}
Manager.prototype.PrintText = function (text){
	text = text.toUpperCase();
	this.manage.KeyDown(Number(16));
	for(var i=0; i<text.length;i++){
		var key = String(text).charCodeAt(i);
		if(key >= 48 && key <= 90) {
			this.manage.KeyPress(String(text).charCodeAt(i));
		}
	}
	this.manage.KeyPress(49);
	this.manage.KeyUp(Number(16));
	Sleep(500);
}

global.Manager = Manager;
global.Sleep = Sleep;

